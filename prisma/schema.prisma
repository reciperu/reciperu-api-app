// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SpaceRole {
  OWNER
  MEMBER
}

enum MenuStatus {
  PENDING
  CANCELED
  CONFIRMED
}

enum ActiveStatus {
  ONBOARDING
  JOINED_SPACE
  NOT_JOINED_SPACE
}

model Space {
  id               String            @id @default(cuid())
  name             String?
  spaceUsers       SpaceUser[]
  spaceInvitations SpaceInvitation[]
  menus            Menu[]
  recipeBooks      RecipeBook[]

  @@index([id])
  @@map("spaces")
}

model User {
  id           String       @id @default(cuid())
  name         String
  spaceRole    SpaceRole?   @default(OWNER) @map("space_role")
  imageUrl     String       @map("image_url")
  activeStatus ActiveStatus @default(ONBOARDING) @map("active_status")
  uid          String       @unique
  spaceUsers   SpaceUser[]
  menus        Menu[]
  recipes      Recipe[]

  @@index([id])
  @@map("users")
}

model SpaceUser {
  id      Int    @id @default(autoincrement())
  userId  String @map("user_id")
  spaceId String @map("space_id")
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([id])
  @@map("space_users")
}

model RecipeBook {
  id      String   @id @default(cuid())
  name    String
  spaceId String   @map("space_id")
  space   Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  recipes Recipe[]

  @@index([id])
  @@map("recipe_books")
}

model SpaceInvitation {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  expiredAt DateTime  @map("expired_at")
  usedAt    DateTime? @map("used_at")
  spaceId   String    @map("space_id")
  space     Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@index([id])
  @@map("space_invitations")
}

model Recipe {
  id           Int        @id @default(autoincrement())
  title        String
  thumbnailUrl String?    @map("thumbnail_url")
  imageUrls    String?    @map("image_urls")
  recipeUrl    String?    @map("recipe_url")
  isFavorite   Boolean    @default(false) @map("is_favorite")
  memo         String?
  faviconUrl   String?    @map("favicon_url")
  appName      String?    @map("app_name")
  recipeBookId String     @map("recipe_book_id")
  userId       String     @map("user_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  recipeBook   RecipeBook @relation(fields: [recipeBookId], references: [id], onDelete: Cascade)
  menus        Menu[]
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([id])
  @@map("recipes")
}

model Menu {
  id          Int        @id @default(autoincrement())
  status      MenuStatus @default(PENDING)
  scheduledAt DateTime?  @map("scheduledAt")
  spaceId     String     @map("space_id")
  recipeId    Int        @map("recipe_id")
  userId      String     @map("user_id")
  createdAt   DateTime   @default(now()) @map("created_at")
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  space       Space      @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  recipe      Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([id])
  @@map("menus")
}
