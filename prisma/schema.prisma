// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SpaceRole {
  OWNER
  PARTICIPANT
}

enum MenuStatus {
  PENDING
  CANCELED
  CONFIRMED
}

enum ActiveStatus {
  ONBOARDING
  JOINED_SPACE
  NOT_JOINED_SPACE
}

model Space {
  spaceId          String            @id @default(cuid()) @map("space_id")
  name             String?
  spaceInvitations SpaceInvitation[]
  recipes          Recipe[]
  users            User[]
  menus            Menu[]

  @@index([spaceId])
  @@map("spaces")
}

model User {
  userId           String            @id @default(cuid()) @map("user_id")
  name             String
  imageUrl         String            @map("image_url")
  activeStatus     ActiveStatus      @default(ONBOARDING) @map("active_status")
  uid              String            @unique
  spaceRole        SpaceRole         @default(OWNER) @map("space_role")
  mySpaceId        String           @map("my_space_id")
  menus            Menu[]
  recipes          Recipe[]
  requestedRecipes RequestedRecipe[]
  spaceId          String?           @map("space_id")
  space            Space?            @relation(fields: [spaceId], references: [spaceId], onDelete: Cascade)

  @@index([userId])
  @@map("users")
}

model SpaceInvitation {
  token     String    @id @unique
  expiredAt DateTime  @map("expired_at")
  usedAt    DateTime? @map("used_at")
  spaceId   String    @map("space_id")
  space     Space     @relation(fields: [spaceId], references: [spaceId], onDelete: Cascade)

  @@index([token])
  @@map("space_invitations")
}

model Recipe {
  recipeId         String            @id @default(cuid())
  title            String
  thumbnailUrl     String?           @map("thumbnail_url")
  imageUrls        String?           @map("image_urls")
  recipeUrl        String?           @map("recipe_url")
  memo             String?
  faviconUrl       String?           @map("favicon_url")
  appName          String?           @map("app_name")
  spaceId          String            @map("space_id")
  userId           String            @map("user_id")
  archivedAt       DateTime?         @map("archived_at")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime?         @updatedAt @map("updated_at")
  space            Space             @relation(fields: [spaceId], references: [spaceId], onDelete: Cascade)
  menus            Menu[]
  requestedRecipes RequestedRecipe[]
  user             User              @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([recipeId])
  @@index([createdAt])
  @@map("recipes")
}

model Menu {
  menuId      String     @id @default(cuid()) @map("menu_id")
  status      MenuStatus @default(PENDING)
  scheduledAt DateTime   @map("scheduledAt") @db.Date
  spaceId     String     @map("space_id")
  userId      String     @map("user_id")
  recipeId    String     @map("recipe_id")
  createdAt   DateTime   @default(now()) @map("created_at")
  user        User       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  recipe      Recipe     @relation(fields: [recipeId], references: [recipeId], onDelete: Cascade)
  space       Space      @relation(fields: [spaceId], references: [spaceId], onDelete: Cascade)

  @@index([menuId])
  @@map("menus")
}

model RequestedRecipe {
  userId    String   @map("user_id")
  recipeId  String   @map("recipe_id")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  recipe    Recipe   @relation(fields: [recipeId], references: [recipeId], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@index([userId, recipeId])
  @@index([createdAt])
  @@map("requested_recipes")
}
