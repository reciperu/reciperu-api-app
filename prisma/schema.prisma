// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RecipeBookRole {
  OWNER
  PARTICIPANT
}

enum MenuStatus {
  PENDING
  CANCELED
  CONFIRMED
}

enum ActiveStatus {
  ONBOARDING
  JOINED_RECIPE_BOOK
  NOT_JOINED_RECIPE_BOOK
}

model RecipeBook {
  id                    String                 @id @default(cuid())
  name                  String?
  recipeBookUsers       RecipeBookUser[]
  recipeBookInvitations RecipeBookInvitation[]
  recipes               Recipe[]

  @@index([id])
  @@map("recipe_books")
}

model User {
  id                    String           @id @default(cuid())
  name                  String
  imageUrl              String           @map("image_url")
  activeStatus          ActiveStatus     @default(ONBOARDING) @map("active_status")
  uid                   String           @unique
  currentRecipeBookRole RecipeBookRole   @default(OWNER) @map("current_recipe_book_role")
  currentRecipeBookId   String           @map("current_recipe_book_id")
  recipeBookUsers       RecipeBookUser[]
  menus                 Menu[]
  recipes               Recipe[]

  @@index([id])
  @@map("users")
}

model RecipeBookUser {
  id             String         @id @default(cuid())
  userId         String         @map("user_id")
  recipeBookId   String         @map("recipe_book_id")
  recipeBookRole RecipeBookRole @default(OWNER) @map("recipe_book_role")
  recipeBook     RecipeBook     @relation(fields: [recipeBookId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeBookId])
  @@index([id])
  @@map("recipe_book_users")
}

model RecipeBookInvitation {
  id           String     @id @default(cuid())
  token        String     @unique
  expiredAt    DateTime   @map("expired_at")
  usedAt       DateTime?  @map("used_at")
  recipeBookId String     @map("recipe_book_id")
  recipeBook   RecipeBook @relation(fields: [recipeBookId], references: [id], onDelete: Cascade)

  @@index([id])
  @@map("recipe_book_invitations")
}

model Recipe {
  id           String     @id @default(cuid())
  title        String
  thumbnailUrl String?    @map("thumbnail_url")
  imageUrls    String?    @map("image_urls")
  recipeUrl    String?    @map("recipe_url")
  isFavorite   Boolean    @default(false) @map("is_favorite")
  memo         String?
  faviconUrl   String?    @map("favicon_url")
  appName      String?    @map("app_name")
  recipeBookId String     @map("recipe_book_id")
  userId       String     @map("user_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  recipeBook   RecipeBook @relation(fields: [recipeBookId], references: [id], onDelete: Cascade)
  menus        Menu[]
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([id])
  @@map("recipes")
}

model Menu {
  id          String     @id @default(cuid())
  status      MenuStatus @default(PENDING)
  scheduledAt DateTime?  @map("scheduledAt")
  recipeId    String     @map("recipe_id")
  userId      String     @map("user_id")
  createdAt   DateTime   @default(now()) @map("created_at")
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe      Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([id])
  @@map("menus")
}
